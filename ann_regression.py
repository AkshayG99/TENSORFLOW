# -*- coding: utf-8 -*-
"""ANN Regression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Suk90ND8WekQUTd648kWEBLUTy2ebERD
"""

#import tensorflow as tf
import tensorflow as tf
#other imports
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

#Make the dataset

N = 1000
X = np.random.random((N, 2)) * 6-3
Y = np.cos(2*X[:,0]) + np.cos(3*X[:,1])

#plot function
fig = plt.figure()
ax = fig.add_subplot(111, projection="3d")
ax.scatter(X[:,0], X[:,1], Y)

#Build model
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(128, input_shape=(2,), activation="relu"),
    tf.keras.layers.Dense(1)
])

#Compile and fit

opt = tf.keras.optimizers.Adam(0.01)
model.compile(optimizer=opt, loss="mse")

#fit model
r = model.fit(X, Y, epochs=100)

#plot the loss
plt.plot(r.history["loss"], label="loss")

# Plot the prediction surface
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X[:,0], X[:,1], Y)

# surface plot
line = np.linspace(-3, 3, 50)
xx, yy = np.meshgrid(line, line)
Xgrid = np.vstack((xx.flatten(), yy.flatten())).T
Yhat = model.predict(Xgrid).flatten()
ax.plot_trisurf(Xgrid[:,0], Xgrid[:,1], Yhat, linewidth=0.2, antialiased=True)
plt.show()

# Can it extrapolate?
# Plot the prediction surface
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X[:,0], X[:,1], Y)

# surface plot
line = np.linspace(-5, 5, 50)
xx, yy = np.meshgrid(line, line)
Xgrid = np.vstack((xx.flatten(), yy.flatten())).T
Yhat = model.predict(Xgrid).flatten()
ax.plot_trisurf(Xgrid[:,0], Xgrid[:,1], Yhat, linewidth=0.2, antialiased=True)
plt.show()